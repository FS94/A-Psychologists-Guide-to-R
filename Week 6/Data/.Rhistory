file = "http://stat405.had.co.nz/data/tb.csv",
header = TRUE,
stringsAsFactors = FALSE
)
head(tb)
head(weather)
test <- read.csv('/Users/Sean/Dropbox/PhD/Data/Fisher testosterone reanalysis/Original data and analysis/Fisher_data.csv')
head(test)
test$code
test$session
paste0('P', rep(1:3, each = 2), 'Session', 'rep(1:3, 2)')
paste0('P', rep(1:3, each = 2), 'Session', rep(1:3, 2))
paste0('P', rep(1:3, each = 2), '.Session', rep(1:3, 2))
part <- paste0('P', rep(1:3, each = 2), '.Session', rep(1:3, 2))
result <- c(3, 1, 4, 5, 2, 4)
part <- data.frame(part, result, stringsAsFactors = FALSE)
head(part)
write.csv(part, '/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/participants.csv', row.names = FALSE)
part <- paste0('p', rep(1:3, each = 2), '.day', rep(1:3, 2))
part <- paste0('p', rep(1:3, each = 2), '.day', rep(1:3, 2))
result <- c(3, 1, 4, 5, 2, 4)
part <- data.frame(part, result, stringsAsFactors = FALSE)
part
write.csv(part, '/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/participants.csv', row.names = FALSE)
part
participant <- part
separate(participant, part, into = c('pid', 'day'))
head(weather)
weather <- weather[!duplicated(paste0(weather$id, weather$year, weather$month)), ]
weather
write.csv(weather, '/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/weather data.csv', row.names = FALSE)
weather <- read.delim(
file = "http://stat405.had.co.nz/data/weather.txt",
stringsAsFactors = FALSE
)
weather <- (melt(weather, id.vars = 1:4, na.rm = TRUE))
weather$variable <- NULL
weather <- weather[!duplicated(paste0(weather$id, weather$year, weather$month, weather$element)), ]
head(weather)
weather
write.csv(weather, '/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/weather data.csv', row.names = FALSE)
dcast(weather, id + year + month ~ element)
billboard <- read.csv('http://stat405.had.co.nz/data/billboard.csv', stringsAsFactors = FALSE)
head(billboard)
moral <- read.csv('/Users/Sean/Dropbox/Post-Doc/R course/R Course Materials 2016/Week 5/Data/cross nation moral sensitivity.csv')
head(moral)
moral_nat <- moral[, c(1, 2, 3)]
moral_pers <- moral[, c(1, 3, 5, 6)]
moral_nat <- moral[, c(1, 2, 4)]
moral_nat
moral_nat <- moral[c(1, 3, 300, 500), c(1, 2, 4)]
moral_nat
moral_pers <- moral[c(1, 3, 300, 500), c(1, 3, 5, 6)]
rownames(moral_person)
rownames(moral_pers)
rownames(moral_pers) <- 1:4
rownames(moral_nat) <- 1:4
join(moral_nat, moral_pers)
moral_nat
moral_pers
colnames(moral_pers) <- c('name', 'age', 'mf_harm', 'mf_fairness')
head(moral_pers)
moral_nat <- moral[c(1, 3, 300, 500), c(1, 2, 4)]
rownames(moral_nat) <- 1:4
head(moral_nat)
moral_nat <- moral[c(1, 3, 300, 500), c(1, 2, 2, 4)]
head(moral_nat)
moral_nat <- moral[c(1, 3, 300, 500), c(1, 2, 3)]
head(moral_nat)
rownames(moral_nat) <- 1:4
head(moral_nat)
colnames(moral_nat) <- c('name', 'religiosity', 'age')
moral_nat
moral_nat$name <- c('Joe', 'Bob', 'Sally', 'Roger')
moral_pers$name <- c('Joe', 'Bob', 'Sally', 'Roger')
moral_nat
moral_pers
moral_pers$age <- NULL
join(moral_nat, moral_pers)
write.csv(moral_nat, '/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/moral demographics.csv')
write.csv(moral_pers, '/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/moral outcomes.csv')
join(demo, outcomes)
preg <- read.csv('https://raw.githubusercontent.com/tidyverse/tidyr/master/vignettes/preg.csv',
stringsAsFactors = FALSE)
preg
preg
melt(preg, id.vars = 'name')
temperature
weather
head(weather)
participant
separate(participant, part, into = c('pid', 'day'))
pain
head(pain)
separate(participant, part, into = c('pid', 'day'))
unite(separate(participant, part, into = c('pid', 'day')), c(pid, day))
?unite
unite(separate(participant, part, into = c('pid', 'day')), part, c(pid, day))
participant
participant <- unite(participant, col = part, pid, day)
participant <- separate(participant, part, into = c('pid', 'day'))
participant <- unite(participant, col = part, pid, day)
participant
status <- read_sav('/Users/Sean/Dropbox/PhD/Data/Suppression Project/Suppression and authenticity/Raw Data/Status_study_6__Lab_stimuli_plus_authenticity_manipulation.sav')
head(status)
status <- as.data.frame(status)
status <- status[, -grep('DO_Q', colnames(status))]
head(status)
data <- status
data <- data[,-grep('DO', colnames(data))]
data <- data[,-grep('Placeholder|V5|inst|debrief|Ma|Fa|Mi|Fi|MBE|Suppress|Express|V1|V2|V3|V4', colnames(data))]
require(reshape2)
head(data)
meltdata <- melt(data, id.vars = c('mTurkCode', 'demoint', 'age', 'gender', 'national', 'race',
'relstat', 'esl', 'esl2'), na.rm = TRUE)
head(meltdata)
table(meltdata$variable)
meltdata$varname <- unlist(lapply(meltdata$variable, function(x) gsub('[A-Z a-z]+\\:-', '', descriptions[grep(paste0(x, '$'), names(descriptions))][1])))
meltdata$varname <- str_replace_all(meltdata$varname, ' ', '_')
meltdata$varname <- str_replace_all(meltdata$varname, '\\.|\\"|\\?', '')
getdesc(meltdata)
names(getdesc(meltdata))
names(getdesc(data))
getdesc(data)
names(getdesc(meltdata))
names(getdesc(data))
meltdata$varname <- unlist(lapply(meltdata$variable, function(x) gsub('[A-Z a-z]+\\:-', '', getdesc(data)[grep(paste0(x, '$'), names(getdesc(data)))][1])))
meltdata$variable
meltdata$variable <- as.character(meltdata$variable)
meltdata$varname <- unlist(lapply(meltdata$variable, function(x) gsub('[A-Z a-z]+\\:-', '', getdesc(data)[grep(paste0(x, '$'), names(getdesc(data)))][1])))
getdesc(data)[grep('E6irate_9', names(getdesc(data)))][1])))
getdesc(data)[grep('E6irate_9', names(getdesc(data)))]
meltdata$varname <- unlist(lapply(meltdata$variable, function(x) gsub('[A-Z a-z]+\\:-', '', getdesc(data)[grep(paste0(x, '$'), names(getdesc(data)))][1])))
head(meltdata)
meltdata$varname
meltdata <- meltdata[meltdata$varname %in% c('Dominance', 'Charisma', 'Successfulness', 'Skillfulness', 'Confidence', 'Competence'),]
head(meltdata)
table(meltdata$variable)
meltdata$variable <- str_replace(meltdata$variable, 'rate_[0-9]+', '')
head(meltdata)
table(meltdata$variable)
head(unite(meltdata, variable, variable, varname))
meltdata <- (unite(meltdata, variable, variable, varname))
head(dcast(meltdata, ... ~ variable))
data <- head(dcast(meltdata, ... ~ variable))
colnames(data)
colnames(data)[c(1, 2, 3, 4, 5, 6, 7, 8, 9)]
colnames(data)[c(1, 2, 3, 4, 5, 6, 7, 8, 9)] <- c('PID', 'demoint', 'age', 'gender', 'national', 'race', 'relstat', 'esl', 'esl2')
data$esl2 <- NULL
data$esl <- NULL
data$demoint <- NULL
head(data)
write.csv(data, '/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/status data messy.csv', row.names = FALSE)
status <- read.csv('/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/status data messy.csv',
stringsAsFactors = FALSE)
head(status)
colnames(status)
colnames(status) <- tolower(colnames(status))
colnames(status)
statusmelt <- melt(status, id.vars = c('pid', 'age', 'gender', 'natioanl', 'race', 'relstat'))
statusmelt <- melt(status, id.vars = c('pid', 'age', 'gender', 'national', 'race', 'relstat'))
head(statusmelt)
statusmelt <- melt(status, id.vars = c('pid', 'age', 'gender', 'national', 'race', 'relstat'), na.rm = TRUE)
head(statusmelt)
statusmelt <- melt(status, id.vars = c('pid', 'age', 'gender', 'national', 'race', 'relstat'))
head(statusmelt)
status
head(status)
status <- read.csv('/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/status data messy.csv',
stringsAsFactors = FALSE)
head(meltdata)
nrow(meltdata)
data <- (dcast(meltdata, ... ~ variable))
write.csv(data, '/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/status data messy.csv', row.names = FALSE)
status <- read.csv('/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/status data messy.csv',
stringsAsFactors = FALSE)
head(status)
colnames(status) <- tolower(colnames(status))
colnames(status)
statusmelt <- melt(status, id.vars = c('pid', 'age', 'gender', 'national', 'race', 'relstat'))
head(status)
colnames(data)[c(1, 2, 3, 4, 5, 6, 7, 8, 9)] <- c('PID', 'demoint', 'age', 'gender', 'national', 'race', 'relstat', 'esl', 'esl2')
data$esl2 <- NULL
data$esl <- NULL
data$demoint <- NULL
write.csv(data, '/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/status data messy.csv', row.names = FALSE)
status <- read.csv('/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/status data messy.csv',
stringsAsFactors = FALSE)
colnames(status) <- tolower(colnames(status))
statusmelt <- melt(status, id.vars = c('pid', 'age', 'gender', 'national', 'race', 'relstat'))
nrow(statusmelt)
ncol(statusmelt)
nrow(status)
ncol(status)
ncol(status)*nrow(status)
ncol(statusmelt)*nrow(statusmelt)
head(statusmelt)
(ncol(statusmelt)-1)*nrow(statusmelt)
nrow(status)
head(statusmelt)
table(statusmelt$variable)
?separate
?extract
extract(statusmelt, variable, into = 'test')
head(extract(statusmelt, variable, into = 'test'))
head(extract(statusmelt, variable, into = c('test', 'variable'))
)
head(extract(statusmelt, variable, into = c('test', 'variable')))
head(statusmelt)
table(statusmelt$variable)
head(extract(statusmelt, variable, into = c('test', 'variable')))
head(extract(statusmelt, variable, into = c('test', 'variable2')))
head(extract(statusmelt, variable, into = c(test, variable2)))
head(extract(statusmelt, variable))
head(separate(statusmelt, variable, into = c('one', 'two')))
head(separate(statusmelt, variable, into = c('one', 'two'), regex = '[0-9]+'))
head(separate(statusmelt, variable, into = c('one', 'two'), sep = '[0-9]+'))
head(separate(statusmelt, variable, into = c('one', 'two', 'three', 'four'), sep = c(1, 3, 4, 6)))
head(separate(statusmelt, variable, into = c('one', 'two', 'three', 'four'), sep = c(1, 2, 4, 6)))
head(separate(statusmelt, variable, into = c('one', 'two', 'three', 'four'), sep = c(1, 3, 4, 6)))
head(separate(statusmelt, variable, into = c('one', 'two', 'three', 'four'), sep = c(1, 3, 4, 7)))
head(separate(statusmelt, variable, into = c('one', 'two', 'three', 'four'), sep = c(1, 3, 4, 5)))
head(separate(statusmelt, variable, into = c('one', 'two', 'three', 'four'), sep = c(1, 3, 5)))
head(separate(statusmelt, variable, into = c('one', 'two', 'three', 'four'), sep = c(1, 3, 4, 5)))
head(separate(statusmelt, variable, into = c('one', 'two', 'three', 'four'), sep = c(1, 3, 5)))
test <- separate(statusmelt, variable, into = c('one', 'two', 'three', 'four'), sep = c(1, 3, 5))
head(test)
table(test$one)
table(test$two)
table(test$three)
table(test$four)
str_pad(9, 2, '0')
str_pad(9, '0', 2)
str_pad(9, pad = '0', 2)
str_pad(9, 2, pad ='0')
str_replace(statusmelt$variable, '([0-9])([a-z])', '0\\1\\2')
statusmelt$variable <- str_replace(statusmelt$variable, '([0-9])([a-z])', '0\\1\\2')
statusmelt$variable <- str_replace(statusmelt$variable, '([a-z])([0-9])([a-z])', '\\10\\2\\3')
status <- read.csv('/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/status data messy.csv',
stringsAsFactors = FALSE)
colnames(status) <- tolower(colnames(status))
statusmelt <- melt(status, id.vars = c('pid', 'age', 'gender', 'national', 'race', 'relstat'))
table(str_replace(statusmelt$variable, '([a-z])([0-9])([a-z])', '\\10\\2\\3'))
separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 2, 4, 6))
head(separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 2, 4, 6)))
head(separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 2, 5, 6)))
head(separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 2, 5)))
head(separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 2, 4)))
head(separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 2, 3)))
head(separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 2, 4)))
head(separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 2, 5)))
head(separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 3, 5)))
head(separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 3, 4)))
statusmelt <- (separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 3, 4)))
head(statusmelt)
statusmelt$rating <- str_replace(statusmelt$rating, '_', '')
head(statusmelt)
statuscast <- dcast(statusmelt, ... ~ rating, value.var = 'value')
head(statuscast)
summary(lmer(charisma ~ exp_cond*auth_cond + (1|pid), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid), data = statuscast))
table(statuscast$auth_cond)
table(statuscast$exp_cond)
table(statuscast$auth_cond)
status <- read.csv('/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/status data messy.csv',
stringsAsFactors = FALSE)
# This dataset is quite an untidy one (though I have cleaned it slightly from its original state). Take a look:
head(status)
# The dataset contains the results of a within-subjects experiment conducted over Qualtrics. In this experiment,
# participants watched videos of subjects either suppressing or expressing their emotions, and were told,
# for each video, that the subject was being authentic or inauthentic in their expression. Then they rated the
# subject on a number of variables (charisma, competence, confidence, dominance, successfullness).
# However, looking through the dataset you might notice that we don't seem to have a variable to represent our
# key manipulation (suppression versus expression). Nor do we have a variable to represent authentic versus
# inauthentic. In fact, pretty much all of our key variables are contained within the column names! E or S
# stands for a response to an expressive video, then there is a number for the Subject of the video, then an i or
# a for inauthentic or authentic, then the variable being rated.
# So E35a_Competence would be the rating of charisma given to (video) Subject 35, when expressing and authentic.
# Clearly, we have an extreme case of untidy data problem #1 here (values in variable names). This is probably
# the most common data problem I run into, mostly because datasets from repeated measures or longitudinal datasets are
# often collected in this 'wide' format because that is the easiest way to collect and store them, but this isn't
# a tidy way to store them (and not conducive to multilevel modelling).
# You can see from the size of this dataset that cleaning it would be a pretty daunting task by hand, or even using
# specific subsetting commands in R. Thankfully, with the suite of tools we've learned, this dataset can be cleaned
# in only a few short commands.
# First, we'll want to melt() the data, putting all of the column headers containing data into a single column where
# we can work on them with separate(). To do this, we need to specify our id.vars in melt. These are the variables
# that, together, identify a single observational unit - in this case a participant.
colnames(status)
# In this data frame, our id variables are PID (participant ID), age, gender, national, race, and relstat.
# Before we go any further, let's make all our column names lower case.
colnames(status) <- tolower(colnames(status))
statusmelt <- melt(status, id.vars = c('pid', 'age', 'gender', 'national', 'race', 'relstat'))
head(statusmelt)
table(statusmelt$variable)
table(str_replace(statusmelt$variable, '([a-z])([0-9])([a-z])', '\\10\\2\\3'))
statusmelt$variable <- str_replace(statusmelt$variable, '([a-z])([0-9])([a-z])', '\\10\\2\\3')
separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 2, 4, 6))
head((separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 3, 4))))
table((separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 3, 4)))$auth_cond)
statusmelt <- (separate(statusmelt, variable, into = c('exp_cond', 'subject', 'auth_cond', 'rating'), sep = c(1, 3, 4)))
statusmelt$rating <- str_replace(statusmelt$rating, '_', '')
statuscast <- dcast(statusmelt, ... ~ rating, value.var = 'value')
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid) + (1|subject), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid) + (1|subject), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid) + (1|subject), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid) + (1 + auth_cond|subject), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1 + auth_cond|pid) + (1 |subject), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid) + (1 + auth_cond|subject), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1 + auth_cond|pid) + (1 |subject), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid) + (1 + auth_cond|subject), data = statuscast))
summary(lmer(charisma ~ 1 + exp_cond*auth_cond + (1|pid) + (1|subject), data = statuscast))
status <- read.csv('/Users/Sean/Dropbox/Post-Doc/R course/Raw materials/Week 6/Data/status data messy.csv',
stringsAsFactors = FALSE)
# This dataset is quite an untidy one (though I have cleaned it slightly from its original state). Take a look:
head(status)
# The dataset contains the results of a within-subjects experiment conducted over Qualtrics. In this experiment,
# participants watched videos of subjects either suppressing or expressing their emotions, and were told,
# for each video, that the subject was being authentic or inauthentic in their expression. Then they rated the
# subject on a number of variables (charisma, competence, confidence, dominance, successfullness).
# However, looking through the dataset you might notice that we don't seem to have a variable to represent our
# key manipulation (suppression versus expression). Nor do we have a variable to represent authentic versus
# inauthentic. In fact, pretty much all of our key variables are contained within the column names! E or S
# stands for a response to an expressive video, then there is a number for the Subject of the video, then an i or
# a for inauthentic or authentic, then the variable being rated.
# So E35a_Competence would be the rating of charisma given to (video) Subject 35, when expressing and authentic.
# Clearly, we have an extreme case of untidy data problem #1 here (values in variable names). This is probably
# the most common data problem I run into, mostly because datasets from repeated measures or longitudinal datasets are
# often collected in this 'wide' format because that is the easiest way to collect and store them, but this isn't
# a tidy way to store them (and not conducive to multilevel modelling).
# You can see from the size of this dataset that cleaning it would be a pretty daunting task by hand, or even using
# specific subsetting commands in R. Thankfully, with the suite of tools we've learned, this dataset can be cleaned
# in only a few short commands.
# First, we'll want to melt() the data, putting all of the column headers containing data into a single column where
# we can work on them with separate(). To do this, we need to specify our id.vars in melt. These are the variables
# that, together, identify a single observational unit - in this case a participant.
colnames(status)
# In this data frame, our id variables are PID (participant ID), age, gender, national, race, and relstat.
# Before we go any further, let's make all our column names lower case.
colnames(status) <- tolower(colnames(status))
colnames(status)
# Alright, now let's melt the data. Because we can easily make mistakes when using complicated functions like melt
# and cast, it's never a good idea to overwrite the original data frame. Instead, I usually add the word 'melt'
# and 'cast' to the end of the name (as you've already seen).
statusmelt <- melt(status, id.vars = c('pid', 'age', 'gender', 'national', 'race', 'relstat'))
# As you can see, the statusmelt data frame is considerably narrower than the status dataframe. But it's much longer
# (24000 rows instead of 200).
head(statusmelt)
messy <- data.frame('pid' = 1:6, 'condition' = c('low_fast', 'low_slow', 'low_fast', 'low_slow', 'low_fast', 'low_slow'), stringsAsFactors = FALSE)
getwd()
setwd('/Users/Sean/Dropbox/Post-Doc/R course/R Course Materials 2016/Week 6/Data')
write.csv(messy, 'problem 2.csv', row.names = FALSE)
head(messy)
messy <- read.csv('problem two.csv', stringsAsFactors = FALSE)
messy <- read.csv('problem 2.csv', stringsAsFactors = FALSE)
head(messy)
messy <- data.frame('pid' = 1:6, 'condition' = c('low_fast', 'low_slow', 'low_fast', 'high_slow', 'high_fast', 'high_slow'), stringsAsFactors = FALSE)
write.csv(messy, 'problem 2.csv', row.names = FALSE)
messy <- read.csv('problem 2.csv', stringsAsFactors = FALSE)
head(messy)
messy$condition
table(messy$condition)
messy <- data.frame('pid' = 1:8, 'condition' = c('low_fast', 'low_slow', 'low_fast', 'lo_slow', high_slow', 'high_fast', 'high_slow', 'high_fast'), stringsAsFactors = FALSE)
messy <- data.frame('pid' = 1:8, 'condition' = c('low_fast', 'low_slow', 'low_fast', 'lo_slow', 'high_slow', 'high_fast', 'high_slow', 'high_fast'), stringsAsFactors = FALSE)
write.csv(messy, 'problem 2.csv', row.names = FALSE)
messy
table(messy$condition)
str_replace(messy$condition, 'lo_', 'low_')
str_replace(messy$condition, '^lo_', 'low_')
str_replace(messy$condition, 'lo', 'low_')
str_replace(messy$condition, 'lo', 'low')
str_replace(messy$condition, '^lo_', 'low_')
messy$condition <- str_replace(messy$condition, '^lo_', 'low_')
head(messy)
table(messy$condition)
str_extract(messy$condition, 'high|low')
str_extract(messy$condition, '^[a-z]*')
read.csv('/Users/Sean/Dropbox/Post-Doc/R course/R Course Materials 2016/Week 6/Data/Coping intervention over time.csv')
head(read.csv('/Users/Sean/Dropbox/Post-Doc/R course/R Course Materials 2016/Week 6/Data/Coping intervention over time.csv'))
head(messy)
separate(messy, condition, into = c('high_low', 'fast_flow'), sep = '_')
test <- read.csv('/Users/Sean/Dropbox/Post-Doc/R course/R Course Materials 2016/Week 6/Data/Coping intervention over time.csv')
head(test)
qplot(test$pstotal)
summary(pstotal ~ time + (1|participantid), data = test)
summary(lmer(pstotal ~ time + (1|participantid), data = test))
summary(lmer(pstotal ~ time + condition + (1|participantid), data = test))
summary(lmer(pstotal ~ time * condition + (1|participantid), data = test))
separate(messy, condition, into = c('high_low', 'fast_flow'), sep = '_')
separate(messy, condition, into = c('high_low', 'fast_slow'), sep = 4)
messy_sep <- separate(messy, condition, into = c('high_low', 'fast_slow'), sep = '_')
messy_sep
?unite
messy_union <- unite(messy_sep, condition, c(high_low, fast_slow))
messy_union <- unite(messy_sep, condition, c(high_low, fast_slow))
messy_union
messy_union <- unite(messy_sep, condition, c(high_low, fast_slow))
head(messy_union)
messy_union <- unite(messy_sep, condition, c(high_low, fast_slow), sep = '')
head(messy_union)
copewide <- read.csv('Intervention over time data wide.csv',
stringsAsFactors = FALSE)
head(copewide)
# Now, we could accomplish this task almost exclusively using what I've already taught you - subsetting with a bit of
# ingenuity. Let's break down the problem into steps. We need to create a time variable, containing
# the information currently in the column names. And we need to bring the ps.total variable into a
# single column, where each value matches the time it's associated with. What we could do is create
# three separate datasets, and then stitch them together.
# Here, we've used subsetting to pull out the variables that stay the same across timepoints (pid and condition)
# and then pull only one timepoint on the outcome variable. We've created a 'time' variable in each dataset,
# and then set it to the appropriate time. At this stage, each dataset it almost tidy. We still have time
# contained within the column names for ps.total though, which is now redundant. So let's remove that.
copewide.T1 <- copewide[, c('pid', 'condition', 'ps.total_T1')]
copewide.T1$time <- 1
copewide.T2 <- copewide[, c('pid', 'condition', 'ps.total_T2')]
copewide.T2$time <- 2
copewide.T3 <- copewide[, c('pid', 'condition', 'ps.total_T3')]
copewide.T3$time <- 3
colnames(copewide.T1)[3] <- 'ps.total'
colnames(copewide.T2)[3] <- 'ps.total'
colnames(copewide.T3)[3] <- 'ps.total'
head(copewide.T1)
copeclean <- rbind(copewide.T1, copewide.T2)
copeclean <- rbind(copeclean, copewide.T3)
head(copeclean)
print(paste('number of rows:', nrow(copewide))); print(paste('number of columns:', ncol(copewide)))
copemelt <- melt(copewide, id.vars = c('pid', 'condition'))
head(copemelt)
colnames(copemelt)[3:4] <- c('time', 'ps.total')
head(copemelt)
copemelt$time <- str_replace(copemelt$time, 'ps.total_T', '')
head(copemelt)
copemelt <- melt(copewide, id.vars = c('pid', 'condition'))
colnames(copemelt)[3:4] <- c('time', 'ps.total')
copemelt$time <- str_replace(copemelt$time, 'ps.total_T', '')
head(copewide)
head(copemelt)
copecast <- dcast(copemelt, pid + condition ~ time, value.var = 'ps.total')
print(paste('number of rows:', nrow(copewide))); print(paste('number of columns:', ncol(copewide)))
print(paste('number of rows:', nrow(copecast))); print(paste('number of columns:', ncol(copecast)))
head(copecast)
head(copewide)
paste0('ps.total_T', c(1, 2, 3))
colnames(copecast)[3:5] <- paste0('ps.total_T', c(1, 2, 3))
paste('ps.total_T', c(1, 2, 3), sep = '')
statusmelt$variable
str_extract(statusmelt$variable, '[ei]')
coping <- read.csv('Coping intervention over time.csv',
stringsAsFactors = FALSE)
head(coping)
coping$pstotal <- scale(coping$pstotal)
model.1 <- (lmer(pstotal ~ time + (1|participantid), data = coping))
summary(model.1)
model.3 <- (lmer(pstotal ~ time*condition + (1 + time||participantid), data = coping))
summary(model.3)
support <- read.csv('social support intervention.csv', stringsAsFactors = FALSE)
support.mean <- aggregate(connection ~ pid, data = support, FUN = mean, na.rm = TRUE)
support.mean <- aggregate(connection ~ pid, data = support, FUN = mean, na.rm = TRUE)
head(support.mean)
colnames(support.mean)[2] <- 'mean_connection'
support <- join(support, support.mean)
head(support)
support$connection.c <- support$connection - support$mean_connection
support$mean_connection <- scale(support$mean_connection)
support$adjustment <- scale(support$adjustment)
model.1 <- lmer(adjustment ~ time + (1|pid), data = support)
summary(model.1)
model.2 <- lmer(adjustment ~ time + mean_connection + (1|pid), data = support)
summary(model.2)
model.3 <- lmer(adjustment ~ time * mean_connection + (1|pid), data = support)
summary(model.3)
model.4 <- lmer(adjustment ~ connection.c + (1|pid), data = support)
summary(model.4)
model.5 <- lmer(adjustment ~ connection.c + time + (1|pid), data = support)
summary(model.5)
support_lag <- support
head(support_lag)
support_lag <- support_lag$time + 1
head(support_lag)
support_lag <- support
support_lag$time <- support_lag$time + 1
head(support_lag)
test <- qual.load('/Users/Sean/Dropbox/PhD/Data/Social Innovation/Mturk Education control/Data collection/Qualtrics/Dating_Profile_Study_2__Rating.csv')
getdesc(test)
str_replace(getdesc(test), '.*\.\\.\\.-', '')
labels <- str_replace(getdesc(test), '.*\\.\\.\\.-', '')
names(getdesc(test))
names(labels) <- names(getdesc(test))
colnames(test)
colnames(test)[grep('Q[0-9]*_[0-9]+', colnames(test))]
colnames(test)[grep('Q[0-9]*_[0-9]+', colnames(test))] <- paste0(colnames(test)[grep('Q[0-9]*_[0-9]+', colnames(test))], labels[colnames(test)[grep('Q[0-9]*_[0-9]+', colnames(test))]])
colnames(test)[grep('Q[0-9]*_[0-9]+', colnames(test))]
colnames(test)[grep('Q[0-9]*_[0-9]+', colnames(test))] <- gsub('_[0-9]*', '_', colnames(test)[grep('Q[0-9]*_[0-9]+', colnames(test))])
head(test)
testmelt <- melt(test, measure.vars = grep('Q[0-9]*_[ACHOSUDI]', colnames(test)), na.rm = TRUE)
table(testmelt$variable)
head(testmelt)
testmelt <- separate(testmelt, variable, into = c('target', 'rating'), sep = '_')
head(testmelt)
table(testmelt$variable)
table(testmelt$rating)
testmelt$target <- str_replace(testmelt$target, 'Q', '')
head(testmelt)
table(str_replace(testmelt$rating, '^Un([a-z])', 'Unn\\1'))
table(str_replace(testmelt$rating, '^Unn', 'Un'))
testmelt$rating <- (str_replace(testmelt$rating, '^Unn', 'Un'))
head(testmelt)
testcast <- dcast(testmelt, ... ~ rating, drop = TRUE)
head(testcast)
